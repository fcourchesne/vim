scriptencoding utf-8
set encoding=utf-8

" Vim-Plug packages {{{
call plug#begin('~/.vim/plugged')

" Main
    Plug 'w0rp/ale' "async syntax checker
    Plug 'ycm-core/YouCompleteMe'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'vim-airline/vim-airline'
    " Plug 'vim-airline/vim-airline-themes'
    " Plug 'airblade/vim-rooter'
    Plug 'tpope/vim-commentary'
    Plug 'Lokaltog/vim-easymotion' 	"Easy find strings in document
    " Plug 'aserebryakov/vim-todo-lists'
    " Plug 'Yggdroot/indentLine'
    Plug 'tpope/vim-surround'
    Plug 'Raimondi/delimitMate' 		"Close tags
    "Plug 'alvan/vim-closetag'
    Plug 'tpope/vim-fugitive'
    Plug 'majutsushi/tagbar'

" Go
    " Plug 'fatih/vim-go'
    "
" Web
    Plug 'ap/vim-css-color'

" Appearance
    Plug 'fcourchesne/vizuki2'
    " Plug 'fcourchesne/FC-vim-colors'
    Plug 'gruvbox-community/gruvbox'
    Plug 'fcourchesne/airline-transparent'
    Plug 'axvr/photon.vim'
    Plug 'ayu-theme/ayu-vim' " or other package manager

" Syntax highlight
    Plug 'rust-lang/rust.vim'
    " Plug 'ekalinin/Dockerfile.vim'

" Files management
    Plug 'kien/ctrlp.vim'             "Using Ctrl-F as a shortcut, searches buffer, files, content
    Plug 'scrooloose/nerdtree'


" Auto completion
    " Plug 'MarcWeber/vim-addon-mw-utils'
    " Plug 'tomtom/tlib_vim'
    Plug 'ervandew/supertab'
    " Plug 'garbas/vim-snipmate'
    Plug 'SirVer/ultisnips'
    " Plug 'honza/vim-snippets'
    Plug 'fcourchesne/FC-Snippets'

"Other
    Plug 'christoomey/vim-tmux-navigator' 		"Seamless tmux /vim navigator with hjkl keys
    Plug 'benmills/vimux'
    Plug 'edkolev/tmuxline.vim'
    " Plug 'leafgarland/typescript-vim'

call plug#end()
""}}}

" {{{ FOLDS
" Folding {{{
"set foldenable
set foldcolumn=0
set foldlevelstart=99
set foldmarker={{{,}}}
set foldmethod=expr
" set foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum))
set foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum+1))
" Look for fold method in file
set foldminlines=1
set foldnestmax=4
" set foldopen=block,hor,jump,mark,percent,quickfix,search,tag
set foldopen=hor,jump,mark,percent,quickfix,search,tag
fu! CustomFoldText()
    "get first non-blank line
    let fs = v:foldstart

    while getline(fs) =~ '^\s*$'
        let fs = nextnonblank(fs + 1)
    endwhile

    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let lineWithoutMarker = substitute(line, "{{{", "", "g")
    let lineWithoutMarker = substitute(lineWithoutMarker, "^\"", "", "g")
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat("჻", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))

    return lineWithoutMarker . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
set foldtext=CustomFoldText()
" Auto save folds and reload on file open
" autocmd BufWinLeave ?* mkview
" autocmd BufWinEnter ?* silent loadview

" Keep folds when saving
augroup remember_folds
  autocmd!
  autocmd BufWinLeave *.* silent! mkview
  autocmd BufWinEnter *.* silent! loadview
augroup END
autocmd FileType rust set foldmethod=syntax
" }}}

set t_Co=256
set termguicolors     " enable true colors support
if has('gui_running')
    set lines=50 columns=130
    if has('gui_win32')
        set guifont=UbuntuMonoRegular:h12:cANSI
    else
        set guifont=Ubuntu\ Mono\ derivative\ Powerline\ Regular\ 13
    endif
endif

set background=dark
let g:gruvbox_contrast_light='soft'
let g:gruvbox_contrast_dark='soft'
colorscheme gruvbox

" set background=dark
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" colorscheme ayu

" colorscheme photon

" highlight Cursor guifg=white guibg=#808080

" OS and encoding specific {{{
set shell=/bin/bash
set encoding=utf8
scriptencoding utf-8
set ffs=unix,dos,mac                " Use Unix as the standard file type
set mouse=a
"}}}

" GUI {{{
" set cursorline                  " highlight current line
if has("gui_running")
    set showmode                    " display the current mode
    set guioptions+=e
    set guioptions-=L
    set guioptions-=T  "no scrollbar by default
    set guioptions-=r  "no toolbar by default
    set guioptions-=m  "no menu displayed by default
    map <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
    map <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
    map <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>
    set guitablabel=\[%N\]\ %t\ %M
endif
"}}}

" Relative numbers when in normal mode, and window focussed {{{
autocmd FocusLost * set norelativenumber
autocmd FocusGained * set relativenumber
autocmd InsertEnter * set norelativenumber
autocmd InsertLeave * set relativenumber
set nu
set norelativenumber
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

nnoremap <C-n> :call NumberToggle()<CR>

autocmd FileType rust match ErrorMsg '\%>140v.\+'

"}}}


" General {{{
set so=5                       " Set 7 lines to the cursor - when moving vertically using j/k
set wildmenu                    " Turn on the WiLd menu
set wildignore=*.o,*~,*.pyc,*.exe,*.hex,*.elf   " Ignore compiled files
set ruler                       "Always show current position
set cmdheight=1                 " Height of the command bar
set hid                         " A buffer becomes hidden when it is abandoned
set ignorecase                  " Ignore case when searching
set smartcase                   " When searching try to be smart about cases
set hlsearch                    " Highlight search results
set incsearch                   " Makes search act like search in modern browsers
set lazyredraw                  " Don't redraw while executing macros (good performance config)
set magic                       " For regular expressions turn magic on
set showmatch                   " Show matching brackets when text indicator is over them
set mat=10                      " How many tenths of a second to blink when matching brackets
set noerrorbells                " No annoying sound on errors
set novisualbell
let g:mapleader = "\<Space>"
nnoremap <SPACE> <Nop>
filetype plugin indent on   " Automatically detect file types.
syntax on                   " syntax highlighting
set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
set virtualedit=onemore         " allow for cursor beyond last character
set nospell                       " no spell checking
set linespace=0                 " No extra spaces between rows
set winminheight=0              " windows can be 0 line high
set gdefault                    " the /g flag on :s substitutions by default
"}}}

" Files, backups and undo {{{
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set undolevels=200      " Number of undo levels.
set undodir=~/.vim/undo
set undofile
set history=1000                " Store a ton of history (default is 20)
"}}}

" Indenting and wrapping {{{
set tabstop=4
set shiftwidth=4                " 1 tab == 4 spaces
set expandtab
set lbr                         " Linebreak on 500 characters
set tw=500
set wrap "Wrap lines

" Movement, tabs and buffers {{{
map j gj
map k gk
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Quit buffer but do not close pane
map <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

" Close the current buffer and tabs
map <leader>bd :Bclose<cr>
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
"}}}

" Easymotion {{{
let g:EasyMotion_startofline = 1 " keep cursor colum when JK motion
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
" map <Leader>l <Plug>(easymotion-lineforward)
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
" map <Leader>h <Plug>(easymotion-linebackward)
"}}}

" General {{{
" Return to last edit position when opening files
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
set viminfo^=%                   " Remember info about open buffers on close"
"}}}

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null
" Work around caps lock
nnoremap ; :
nmap :W :w
nmap :Q :q

" Ctrl-P
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|\.git'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
map <C-b> :bprevious<CR>
map <C-S-b> :bnext<CR>

" Tmux
let g:tmux_navigator_save_on_switch = 0
nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<cr>
nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<cr>
nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<cr>
nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<cr>
nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
let g:tmuxline_powerline_separators = 0

" NerdTree 
map <C-o> :NERDTreeToggle<CR>
map <Leader>o :NERDTreeToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 1
let g:nerdtree_tabs_open_on_console_startup = 1
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.eep', '\.DSN', 'Cargo.lock', '\.lss', '\.lst', '\.map', '\.o', '\.sym', '\.DBK', '\.elf', '\.hex', '\.meta', 'tags', 'Makefile', '\.rs.bk', 'target']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=0
let NERDTreeKeepTreeInNewTab=0
"}}}

" TagBar
nmap <F8> :TagbarToggle<CR>

" Ale
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '▲'
nmap <C-S-e> :ALEPreviousWrap<CR>
nmap <C-e> :ALENextWrap<CR>
let b:ale_linters = {
\   'rust': ['analyzer'],
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'css': ['prettier'],
\   'html': ['prettier'],
\   'scss': ['prettier'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\   'scss': ['prettier'],
\   'html': ['prettier'],
\   'typescript': ['prettier'],
\   'rust': ['rustfmt'],
\}
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1
let g:ale_set_balloons=1
let g:ale_completion_autoimport = 1
let g:ale_fix_on_save = 1
let g:ale_rust_cargo_use_check = 1
" let g:ale_rust_cargo_check_tests = 0
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_rls_executable = 'rust-analyzer'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
nmap<silent> gd :ALEGoToDefinition<CR>
nmap<silent> gh :ALEHover<CR>
nmap<silent> gr :ALEFindReferences<CR>
" autocmd FileType rust nmap<silent> gf :ALESymbolSearch<CR>
"}}}

" Ultisnip
let g:UltiSnipsSnippetsDir="~/.vim/plugged/FC-Snippets/ultisnippets"
let g:UltiSnipsSnippetDirectories=["ultisnippets"]

" YouCompleteMe, block issues with Ultisnip tab completion
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" GitGutter 
map <F6> :GitGutterToggle<CR>
let g:gitgutter_enabled = 1       "Activated by toggling, disabled by default
let g:gitgutter_highlight_lines = 0"
let g:gitgutter_max_signs = 1000  " default value = 500, any higher may slow down vim


" air-line {{{
" let g:airline_theme='gruvbox'
let g:airline_theme='transparent'
let g:airline_mode_map = {
      \ '__'     : '-',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'I',
      \ 'ix'     : 'I',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'N',
      \ 'no'     : 'N',
      \ 'R'      : 'R',
      \ 'Rv'     : 'R',
      \ 's'      : 'S',
      \ 'S'      : 'S',
      \ 't'      : 'T',
      \ 'v'      : 'V',
      \ 'V'      : 'V',
      \ ''     : 'V',
      \ }
" let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_symbols.linenr = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.readonly = ''
let g:airline_symbols.branch = ''
let g:airline#extensions#ale#enabled = 1
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.whitespace = 'Ξ'

" }}}

