let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
"let g:syntastic_go_checkers = ['go', 'golint', 'govet', 'errcheck']
let g:syntastic_go_checkers = ['go', 'govet', 'errcheck']
let g:go_fmt_command = "goimports"  "Enable goimports to automatically insert import paths instead of gofmt:
let g:go_fmt_autosave = 1           "Run gofmt on save, without screen full output

syn keyword     goTodo contained TODO TODO(FC) TODO(fc) FIXME XXX BUG

au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>gd <Plug>(go-def-vertical)
" au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gi <Plug>(go-implements)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nnoremap <leader>Gr :!go run %<cr>
au FileType go nnoremap <leader>GR :!go run -race %<cr>
au FileType go nnoremap <leader>Gt :!go test -v -cover<cr>
au FileType go nnoremap <leader>GT :!go test -race -v -cover<cr>
au FileType go nnoremap <leader>Gb :!go build<cr>
au FileType go nnoremap <leader>GB :!go build -race<cr>
au FileType go nnoremap <leader>Gi :!go install<cr>
au FileType go nnoremap <leader>td :vimgrep TODO **/*.go<cr>:copen<cr>

au FileType go nmap <leader>r :silent !clear<CR> :silent !make build-run<CR> :silent !make run<CR> :redraw! <CR>
"au FileType go nmap <leader>b :silent !clear<CR> :silent !make build<CR> :redraw! <CR>
au FileType go nmap <leader>b :silent !clear<CR> :silent !make build<CR> :redraw! <CR>

" au BufNewFile,BufRead go set foldmethod=marker
" au BufNewFile,BufRead go set foldmarker={,}
" au FileType go set foldmethod=marker
au FileType go set foldmethod=syntax
" au FileType go set foldmarker={,}
" au BufWritePost *.go silent! !ctags -R &
"

" hi link goDeclType 		Type
" hi link goType 			Type
" hi link goStruct 		Function
" hi link goStructDef		Function
" hi link goFunction 		Function
" hi link goDirective 	Statement
" hi link goConditional 	Statement
" hi link goComplexes   	Statement
" hi link goLabel       	Statement
" hi link goDeclaration 	Statement
" hi link goRepeat 		Statement
" hi link goStatement 	Statement
" hi link goTodo 			Todo
" hi link goComment 		Comment 
" hi link goConstants 	Constant


let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
