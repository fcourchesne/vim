"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Main
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" silent !rm -rf ~/.vim/bundle/Vundle > /dev/null 2>&1
" silent !mkdir -p ~/.vim/bundle/ > /dev/null 2>&1
" silent !git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim > /dev/null 2>&1

set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'fcourchesne/FC-vim-colors'
Plugin 'fcourchesne/FC-Snippets'
Plugin 'Xuyuanp/git-nerdtree'
Plugin 'ervandew/supertab'

Plugin 'sjl/gundo.vim'
Plugin 'bling/vim-airline'
Plugin 'scrooloose/syntastic.git'
Plugin 'vim-scripts/tComment'
Plugin 'tpope/vim-surround'
Plugin 'elzr/vim-json'

" Auto completion
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'rking/ag.vim'

" Building
Plugin 'tpope/vim-dispatch'
"Plugin 'mileszs/ack.vim'
"Plugin 'edsono/vim-matchit'
Plugin 'tpope/vim-fugitive'
Plugin 'mattn/gist-vim'
"Plugin 'henrik/vim-indexed-search'
"Plugin 'tpope/vim-abolish'
"Plugin 'tpope/vim-repeat'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'xolox/vim-session'
"Plugin 'xolox/vim-misc'
"Plugin 'editorconfig/editorconfig-vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'airblade/vim-gitgutter'
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'rhysd/clever-f.vim'
" 'ogglable panel'
"Plugin 'tpope/vim-vinegar'
"Plugin 'vim-scripts/taglist.vim'
Plugin 'majutsushi/tagbar'
" language vundles
"Plugin 'pangloss/vim-javascript'
"Plugin 'marijnh/tern_for_vim'
Plugin 'kchmck/vim-coffee-script'
"Plugin 'othree/javascript-libraries-syntax.vim'
"Plugin 'vim-ruby/vim-ruby'
"Plugin 'tpope/vim-rails'
"Plugin 'kana/vim-textobj-user'
"Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'fatih/vim-go'
"Plugin 'dart-lang/dart-vim-plugin'
" Databases
"Plugin 'krisajenkins/dbext.vim'
"Plugin 'vim-scripts/SQLComplete.vim'
"Plugin 'vim-scripts/SQLUtilities'
"Plugin 'NagatoPain/AutoSQLUpperCase.vim'
"Plugin 'vim-scripts/dbext.vim'
" Experimental vundle
"Plugin 'gorodinskiy/vim-coloresque.git'
"Plugin 'maxbrunsfeld/vim-yankstack'

call vundle#end()            " required
filetype plugin indent on    " required

"Change Working Directory to that of the current file
set shell=$SHELL
set encoding=utf8
set ffs=unix,dos,mac                " Use Unix as the standard file type
set cursorline                  " highlight current line
set guicursor=a:blinkon600-blinkoff400  " Slow down cursor blinking speed

if has('mouse')
  set mouse=a
endif

nmap :W :w
nmap :Q :q

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

if has("gui_running")
    set showmode                    " display the current mode
    set guioptions+=e
    set guioptions-=L
    set guioptions-=T  "no scrollbar by default
    set guioptions-=r  "no toolbar by default
    set guioptions-=m  "no menu displayed by default
    ""set guitablabel=%M\ %t
else
    "Insert else
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists("g:airline_symbols")
let g:airline_symbols = {}
endif
let g:airline_theme="powerlineish"
let g:airline_powerline_fonts=1
" let g:airline_section_warning = airline#section#create([ "syntastic" ])
let g:airline#extensions#branch#empty_message = "No SCM"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#fnamecollapse = 1 " /a/m/model.rb
let g:airline#extensions#hunks#non_zero_only = 1 " git gutter




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Auto completion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set complete=.,i " Complete only the current buffer and includes
set completeopt=menu,menuone,longest " Complete options (disable preview scratch window)
let g:SuperTabDefaultCompletionType = "context"
set ofu=syntaxcomplete#Complete
hi Pmenu guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
hi PmenuSbar guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
hi PmenuThumb guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-go
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
nnoremap <leader>Gr :!go run %<cr>
nnoremap <leader>GR :!go run -race %<cr>
nnoremap <leader>Gt :!go test -v -cover<cr>
nnoremap <leader>GT :!go test -race -v -cover<cr>
nnoremap <leader>Gb :!go build<cr>
nnoremap <leader>GB :!go build -race<cr>
nnoremap <leader>Gi :!go install<cr>
" let g:go_fmt_command = "goimports"  "Enable goimports to automatically insert import paths instead of gofmt:
" let g:go_fmt_autosave = 0           "Run gofmt on save, without screen full output
" au BufWritePost *.go silent! !ctags -R &.


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set so=7                        " Set 7 lines to the cursor - when moving vertically using j/k
set wildmenu                    " Turn on the WiLd menu
set wildignore=*.o,*~,*.pyc,*.exe,*.hex,*.elf   " Ignore compiled files
set ruler                       "Always show current position
set cmdheight=1                 " Height of the command bar
set hid                         " A buffer becomes hidden when it is abandoned
set backspace=eol,start,indent  " Configure backspace so it acts as it should act
set whichwrap+=<,>,h,l
set ignorecase                  " Ignore case when searching
set smartcase                   " When searching try to be smart about cases 
set hlsearch                    " Highlight search results
set incsearch                   " Makes search act like search in modern browsers
set lazyredraw                  " Don't redraw while executing macros (good performance config)
set magic                       " For regular expressions turn magic on
set showmatch                   " Show matching brackets when text indicator is over them
set mat=2                       " How many tenths of a second to blink when matching brackets
set noerrorbells                " No annoying sound on errors
set novisualbell
set t_vb=
set tm=500
let g:mapleader = ","
set backspace=indent,eol,start "Allow backspacing over everything in insert mode.
set undolevels=200      " Number of undo levels.
set history=1000                " Store a ton of history (default is 20)
set ttyfast             " We have a fast terminal connection.
set esckeys             " Cursor keys in insert mode.
if !has('win32') && !has('win64')
    set term=$TERM       " Make arrow and other keys work
endif
filetype plugin indent on   " Automatically detect file types.
syntax on                   " syntax highlighting
scriptencoding utf-8
set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
set virtualedit=onemore         " allow for cursor beyond last character
set spell                       " spell checking on
set backspace=indent,eol,start  " backspace for dummys
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set winminheight=0              " windows can be 0 line high 
set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
set scrolljump=5                " lines to scroll when cursor leaves screen
set scrolloff=3                 " minimum lines to keep above and below cursor
set foldenable                  " auto fold code
set gdefault                    " the /g flag on :s substitutions by default


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => CtrlP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Typical Ctrl-C/V/X behavior and Select all
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
" CTRL-V and SHIFT-Insert are Paste
map <C-V>       "+gP
cmap <C-V>      <C-R>+
cmap <S-Insert>     <C-R>+
" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.
exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']
imap <S-Insert>     <C-V>
vmap <S-Insert>     <C-V>
" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q>       <C-V>
" Select all (ctrl+a)
map <silent> <C-A> gg0vG$
imap <C-A> <ESC><C-A>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off
" set nobackup
" set nowb
" set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nowrap                      " wrap long lines
set autoindent                  " indent at the same level of the previous line
set expandtab                   " tabs are spaces, not tabs
set tabstop=4                   " an indentation every four columns
set softtabstop=4               " let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
set smarttab                    " Be smart when using tabs ;)
set shiftwidth=4                " 1 tab == 4 spaces
set tabstop=4
set lbr                         " Linebreak on 500 characters
set tw=500
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
""set list
""set listchars=tab:>.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map j gj
map k gk

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/


" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
set viminfo^=%                   " Remember info about open buffers on close


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"Pressing ,ss will toggle and un-toggle spell checking
map <leader>ss :setlocal spell!<cr>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
nnoremap ; :

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv 
map <C-f> :CtrlPMixed<CR>
map 0 ^
map <F7> :TagbarToggle<CR>
map <F8> :NERDTreeToggle<CR>
map <C-s> :w<CR>
map <S-s> :w<CR>
map <C-b> :bn<CR>
map <S-b> :bn<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

cmap cwd lcd %:p:h              

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SnipMate {
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:snips_author = 'Francis Courchesne <fcourchesne@gmail.com>'
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => "NerdTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-o> :NERDTreeToggle<CR>
map <S-o> :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.eep', '\.DSN', '\.lss', '\.lst', '\.map', '\.o', '\.sym', '\.DBK', '\.elf', '\.hex', 'tags']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=0
let NERDTreeKeepTreeInNewTab=0

if has("gui_running")
    " Hide icon bar and scrollbar
    " Toggle toolbar/scrollbar/menu 
    map <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
    map <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
    map <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>
endif
